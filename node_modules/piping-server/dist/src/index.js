#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const http = __importStar(require("http"));
const http2 = __importStar(require("http2"));
const log4js = __importStar(require("log4js"));
const yargs = __importStar(require("yargs"));
const piping = __importStar(require("./piping"));
const version_1 = require("./version");
const parser = yargs
    .option("host", {
    describe: "Bind address (e.g. 127.0.0.1, ::1)",
    type: "string",
})
    .option("http-port", {
    describe: "Port of HTTP server",
    default: 8080
})
    .option("enable-https", {
    describe: "Enable HTTPS",
    boolean: true,
    default: false,
})
    .option("https-port", {
    describe: "Port of HTTPS server",
    type: "number"
})
    .option("key-path", {
    describe: "Private key path",
    type: "string"
})
    .option("crt-path", {
    describe: "Certification path",
    type: "string"
});
const args = parser.parseSync(process.argv.slice(2));
const host = args["host"];
const httpPort = args["http-port"];
const enableHttps = args["enable-https"];
const httpsPort = args["https-port"];
const serverKeyPath = args["key-path"];
const serverCrtPath = args["crt-path"];
const logger = log4js.getLogger();
logger.level = "info";
const pipingServer = new piping.Server({ logger });
logger.info(`Piping Server ${version_1.VERSION}`);
http.createServer({
    requestTimeout: 0,
}, pipingServer.generateHandler(false))
    .listen({ host, port: httpPort }, () => {
    logger.info(`Listen HTTP on ${httpPort}...`);
});
if (enableHttps) {
    if (httpsPort === undefined) {
        logger.error("--https-port is required");
        process.exit(1);
    }
    if (serverKeyPath === undefined) {
        logger.error("--key-path is required");
        process.exit(1);
    }
    if (serverCrtPath === undefined) {
        logger.error("--crt-path is required");
        process.exit(1);
    }
    const generateSecureContextOptions = () => ({
        key: fs.readFileSync(serverKeyPath),
        cert: fs.readFileSync(serverCrtPath),
    });
    const http2Server = http2.createSecureServer(Object.assign(Object.assign({}, generateSecureContextOptions()), { allowHTTP1: true }), pipingServer.generateHandler(true));
    const updateSecureContext = () => {
        try {
            http2Server.setSecureContext(generateSecureContextOptions());
            logger.info("Certificate loaded");
        }
        catch (e) {
            logger.error("Failed to load certificate", e);
        }
    };
    fs.watchFile(serverCrtPath, updateSecureContext);
    fs.watchFile(serverKeyPath, updateSecureContext);
    http2Server.listen({ host, port: httpsPort }, () => {
        logger.info(`Listen HTTPS on ${httpsPort}...`);
    });
}
process.on("uncaughtException", (err) => {
    logger.error("on uncaughtException", err);
});
//# sourceMappingURL=index.js.map